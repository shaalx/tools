touch README.md
git init
git add .
git commit -a
git remote add first https://github.com/zhuulx/love.git
git push -u first master


git pull first


git branch

git checkout zhuulx
//...
git checkout master
git merge zhuulx
git branch -d zhuulx
(git branch -D zhuulx)
git push first master




创建版本库

    $ git clone <url> #克隆远程版本库
    $ git init #初始化本地版本库

修改和提交

    $ git status #查看状态
    $ git diff #查看变更内容
    $ git add . #跟踪所有改动过的文件
    $ git add <file> #跟踪指定的文件
    $ git mv <old> <new> #文件改名
    $ git rm <file> #删除文件
    $ git rm --cached <file> #停止跟踪文件但不删除
    $ git commit -m “commit message” #提交所有更新过的文件
    $ git commit --amend #修改最后一次提交

查看提交历史

    $ git log #查看提交历史

    $ git log -p <file> #查看指定文件的提交历史

    $ git blame <file> #以列表方式查看指定文件的提交历史

撤消

    $ git reset --hard HEAD #撤消工作目录中所有未提交文件的修改内容
    $ git checkout HEAD <file> #撤消指定的未提交文件的修改内容
    $ git revert <commit> #撤消指定的提交

分支与标签

    $ git branch #显示所有本地分支
    $ git checkout <branch/tag> #切换到指定分支或标签
    $ git branch <new-branch> #创建新分支
    $ git branch -d <branch> #删除本地分支
    $ git tag #列出所有本地标签
    $ git tag <tagname> #基于最新提交创建标签
    $ git tag -d <tagname> #删除标签

合并与衍合

    $ git merge <branch> #合并指定分支到当前分支
    $ git rebase <branch> #衍合指定分支到当前分支

远程操作

    $ git remote -v #查看远程版本库信息
    $ git remote show <remote> #查看指定远程版本库信息
    $ git remote add <remote> <url> #添加远程版本库
    $ git fetch <remote> #从远程库获取代码
    $ git pull <remote> <branch> #下载代码及快速合并
    $ git push <remote> <branch> #上传代码及快速合并
    $ git push <remote> :<branch/tag-name> #删除远程分支或标签
    $ git push --tags #上传所有标签

https://gitcafe.com/GitCafe/Help/wiki/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8#wiki


Git push
$ git push origin test:master         // 提交本地test分支作为远程的master分支
$ git push origin test:test              // 提交本地test分支作为远程的test分支
如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。
 
$ git push origin :test              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心。
获得密钥：

ssh-keygen -t rsa -C "defnngj@gmail.com"//填写email地址，然后一直“回车”ok
打开本地..\.ssh\id_rsa.pub文件。此文件里面内容为刚才生成人密钥。

4. 登陆github系统。点击右上角的 Account Settings--->SSH Public keys ---> add another public keys

把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了

5. 接着打开git ，测试连接是否成功

$ ssh -T git@github.com
如果提示：Hi defnngj You've successfully authenticated, but GitHub does not provide shell access. 说明你连接成功了.

6. 设置用户信息：

6.1

$ git config --global user.name "defnngj"//给自己起个用户名
$ git config --global user.email  "defnngj@gmail.com"//填写自己的邮箱
